Subject: [PATCH] LocalCache
---
Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision e6d96a0fc4037c0d45c89aa7eada0be13d0b30d4)
+++ b/main.py	(date 1715957585070)
@@ -1,18 +1,13 @@
 from fastapi import FastAPI
 
 from routes import auth, task
-from services.database_service import dis_connect_all, connect_all
+from services.database_service import db
 
 app = FastAPI()
 app.include_router(auth.router)
 app.include_router(task.router)
 
 
-@app.on_event("startup")
-async def app_startup():
-    connect_all()
-
-
 @app.on_event("shutdown")
 async def app_shutdown():
-    await dis_connect_all()
+    db.dis_connect_all()
Index: routes/auth.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/routes/auth.py b/routes/auth.py
--- a/routes/auth.py	(revision e6d96a0fc4037c0d45c89aa7eada0be13d0b30d4)
+++ b/routes/auth.py	(date 1715955409297)
@@ -9,7 +9,7 @@
 
 from auth.authorize import authenticate_user, oauth2_scheme
 from auth.hashing import get_password_hash, ACCESS_TOKEN_EXPIRE_MINUTES, create_access_token, blacklist_token
-from services.user_service import user_exists, get_next_avail_id, add_new_user
+from services.user_service import user_service
 
 """
     API router for auth endpoint
@@ -57,20 +57,20 @@
     Raises:
         HTTPException: if the username already exists
     """
-    if user_exists(username):
+    if user_service.user_exists(username):
         raise HTTPException(
             status_code=status.HTTP_400_BAD_REQUEST,
             detail="Username already exists",
         )
     hashed_password = get_password_hash(password)
     user = UserInDB(
-        id=get_next_avail_id(),
+        id=user_service.get_next_avail_id(),
         username=username,
         email=email,
         hashed_password=hashed_password,
         is_admin=is_admin,
     )
-    add_new_user(user)
+    user_service.add_new_user(user)
     return user
 
 
Index: services/user_service.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/services/user_service.py b/services/user_service.py
--- a/services/user_service.py	(revision e6d96a0fc4037c0d45c89aa7eada0be13d0b30d4)
+++ b/services/user_service.py	(date 1715957800021)
@@ -1,24 +1,26 @@
 from models.user_model import User
 
-from services.database_service import user_dao
+from services.database_service import DatabaseService
 
 
-def add_new_user(user: User):
-    user_dao.create_user(user)
+class UserService(DatabaseService):
 
+    def add_new_user(self, user: User):
+        self.user_dao.create_user(user)
 
-def user_exists(username: str) -> bool:
-    if get_user(username) is None:
-        return False
-    return True
+    def user_exists(self, username: str) -> bool:
+        if self.get_user(username) is None:
+            return False
+        return True
 
-
-def get_next_avail_id() -> int:
-    last_id = user_dao.get_last_user_id()
-    if last_id is None:
-        return 1
-    return last_id + 1
+    def get_next_avail_id(self) -> int:
+        last_id = self.user_dao.get_last_user_id()
+        if last_id is None:
+            return 1
+        return last_id + 1
 
+    def get_user(self, username: str):
+        return self.user_dao.get_user_by_username(username)
 
-def get_user(username: str):
-    return user_dao.get_user_by_username(username)
+
+user_service = UserService()
\ No newline at end of file
Index: auth/authorize.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/auth/authorize.py b/auth/authorize.py
--- a/auth/authorize.py	(revision e6d96a0fc4037c0d45c89aa7eada0be13d0b30d4)
+++ b/auth/authorize.py	(date 1715955346893)
@@ -7,7 +7,7 @@
 
 from models.token_model import TokenData
 from auth.hashing import verify_password, is_token_blacklisted, SECRET_KEY, ALGORITHM
-from services.user_service import get_user
+from services.user_service import user_service
 
 """
     authorization function middleware
@@ -23,7 +23,7 @@
 
 
 def authenticate_user(username: str, password: str):
-    user = get_user(username)
+    user = user_service.get_user(username)
     if not user:
         return False
     if not verify_password(password, user.hashed_password):
@@ -42,7 +42,7 @@
         token_data = TokenData(username=username)
     except JWTError:
         raise credentials_exception
-    user = get_user(username=token_data.username)
+    user = user_service.get_user(username=token_data.username)
     if user is None:
         raise credentials_exception
     return user
Index: services/token_service.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/services/token_service.py b/services/token_service.py
--- a/services/token_service.py	(revision e6d96a0fc4037c0d45c89aa7eada0be13d0b30d4)
+++ b/services/token_service.py	(date 1715957788495)
@@ -1,9 +1,11 @@
-from services.database_service import user_dao
+from services.database_service import DatabaseService
+
+db = DatabaseService()
 
 
 def add_token_to_blacklist(token: str):
-    user_dao.blacklist_token(token)
+    db.user_dao.blacklist_token(token)
 
 
 def check_if_token_is_blacklisted(token: str) -> bool:
-    return user_dao.is_token_blacklisted(token)
+    return db.user_dao.is_token_blacklisted(token)
Index: routes/task.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/routes/task.py b/routes/task.py
--- a/routes/task.py	(revision e6d96a0fc4037c0d45c89aa7eada0be13d0b30d4)
+++ b/routes/task.py	(date 1715955115490)
@@ -4,7 +4,7 @@
 
 from auth.authorize import oauth2_scheme
 from models.task_model import Task
-from services.task_service import find_all_tasks
+from services.task_service import task_service
 
 """
     API router for task management
@@ -35,5 +35,5 @@
     Returns:
         (list[Task]) The list of task stored in db
     """
-    tasks: list[Task] = find_all_tasks()
+    tasks: list[Task] = task_service.find_all_tasks()
     return tasks
Index: dao/user_dao.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/dao/user_dao.py b/dao/user_dao.py
--- a/dao/user_dao.py	(revision e6d96a0fc4037c0d45c89aa7eada0be13d0b30d4)
+++ b/dao/user_dao.py	(date 1715957332537)
@@ -14,6 +14,9 @@
 
 class UserDAO(BaseDao):
 
+    def __init__(self, host, user, password, database):
+        super().__init__(host, user, password, database)
+
     def create_user(self, user: User):
         cursor = self.cnx.cursor()
         add_user = ("INSERT INTO users "
Index: services/task_service.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/services/task_service.py b/services/task_service.py
--- a/services/task_service.py	(revision e6d96a0fc4037c0d45c89aa7eada0be13d0b30d4)
+++ b/services/task_service.py	(date 1715957807957)
@@ -1,12 +1,17 @@
 from typing import Optional
 
 from models.task_model import Task
-from services.database_service import task_dao
+from services.database_service import DatabaseService
+
 
+class TaskService(DatabaseService):
+    def find_all_tasks(self) -> list[Task]:
+        return self.task_dao.find_all_tasks()
 
-def find_all_tasks() -> list[Task]:
-    return task_dao.find_all_tasks()
+    def get_task_by_id(self, task_id) -> Optional[Task]:
+        return self.task_dao.get_task_by_id(task_id)
 
 
-def get_task_by_id(task_id) -> Optional[Task]:
-    return task_dao.get_task_by_id(task_id)
+task_service = TaskService()
+task_service.connect_all()
+
Index: services/database_service.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/services/database_service.py b/services/database_service.py
--- a/services/database_service.py	(revision e6d96a0fc4037c0d45c89aa7eada0be13d0b30d4)
+++ b/services/database_service.py	(date 1715957708254)
@@ -3,38 +3,40 @@
 from dao.user_dao import UserDAO
 from dao.task_dao import TaskDAO
 
-user_dao = UserDAO(
-    host=config.get("database", "database.host"),
-    user=config.get("database", "database.user"),
-    password=config.get("database", "database.password"),
-    database=config.get("database", "database.dbname")
-)
+
+class DatabaseService:
+
+    def __init__(self):
+        self.user_dao = UserDAO(
+            host=config.get("database", "database.host"),
+            user=config.get("database", "database.user"),
+            password=config.get("database", "database.password"),
+            database=config.get("database", "database.dbname")
+        )
 
-task_dao = TaskDAO(
-    host=config.get("database", "database.host"),
-    user=config.get("database", "database.user"),
-    password=config.get("database", "database.password"),
-    database=config.get("database", "database.dbname")
-)
+        self.task_dao = TaskDAO(
+            host=config.get("database", "database.host"),
+            user=config.get("database", "database.user"),
+            password=config.get("database", "database.password"),
+            database=config.get("database", "database.dbname")
+        )
 
-
-def connect_all():
-    try:
-        user_dao.connect()
-        print("User DB connection open successfully")
+    def connect_all(self):
+        try:
+            self.user_dao.connect()
+            print("User DB connection open successfully")
 
-        task_dao.connect()
-        print("task DB connection open successfully")
-    except Exception as e:
-        print("DB connection error:", e)
+            self.task_dao.connect()
+            print("task DB connection open successfully")
+        except Exception as e:
+            print("DB connection error:", e)
 
-
-def dis_connect_all():
-    try:
-        user_dao.disconnect()
-        print("User DB connection closing successfully")
+    def dis_connect_all(self):
+        try:
+            self.user_dao.disconnect()
+            print("User DB connection closing successfully")
 
-        task_dao.disconnect()
-        print("task DB connection closing successfully")
-    except Exception as e:
-        print("DB connection closing error:", e)
\ No newline at end of file
+            self.task_dao.disconnect()
+            print("task DB connection closing successfully")
+        except Exception as e:
+            print("DB connection closing error:", e)
\ No newline at end of file
Index: dao/task_dao.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/dao/task_dao.py b/dao/task_dao.py
--- a/dao/task_dao.py	(revision e6d96a0fc4037c0d45c89aa7eada0be13d0b30d4)
+++ b/dao/task_dao.py	(date 1715957161202)
@@ -13,6 +13,9 @@
 
 class TaskDAO(BaseDao):
 
+    def __init__(self, host, user, password, database):
+        super().__init__(host, user, password, database)
+
     def get_task_by_id(self, task_id) -> Optional[Task]:
         cursor = self.cnx.cursor()
         query = ("SELECT * "
